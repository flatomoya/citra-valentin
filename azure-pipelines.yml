jobs:
- job: Windows
  timeoutInMinutes: 60
  pool:
    vmImage: 'windows-latest'

  steps:
    - script: |
        git submodule update --init --recursive
      displayName: 'Fetch submodules'
    - script: |
        mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        cmakeArgs: -DCITRA_USE_BUNDLED_QT=ON -DCITRA_USE_BUNDLED_SDL2=ON  -DCITRA_ENABLE_DISCORD_RP=ON -DENABLE_MF=ON -DENABLE_FFMPEG_VIDEO_DUMPER=ON ..
    - task: VSBuild@1
      inputs:
        platform: 'x64'
        solution: 'build/citra.sln'
        configuration: 'Release'
        msbuildArgs: ""
    - powershell: |
        $CITRA_VERSION = (.\build\bin\Release\citra-valentin --version) -replace "Citra Valentin ", ""
        Write-Host "Citra Version: $CITRA_VERSION"
        Write-Host "##vso[task.setvariable variable=CITRA_VERSION]$CITRA_VERSION"
      displayName: 'Get Citra version'
    - powershell: |
        .\build\bin\Release\tests
      displayName: 'Run tests'
    - powershell: |
        Remove-Item ".\build\bin\Release\tests.exe" # Tests
        Get-ChildItem -Path ".\build\bin\Release" *.exp | foreach { Remove-Item -Path $_.FullName }
        Get-ChildItem -Path ".\build\bin\Release" *.lib | foreach { Remove-Item -Path $_.FullName }
        Get-ChildItem -Path ".\build\bin\Release" *.pdb | foreach { Remove-Item -Path $_.FullName }

        # Rename Release to citra-valentin-windows-$env:CITRA_VERSION.
        Rename-Item "build\bin\Release" "citra-valentin-windows-$env:CITRA_VERSION"
      displayName: 'Cleanup'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '.'
        Contents: |
          readme.md
          license.txt
        TargetFolder: 'build/bin/citra-valentin-linux-$(CITRA_VERSION)'
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'dist/scripting'
        Contents: |
          **
        TargetFolder: 'build/bin/citra-valentin-linux-$(CITRA_VERSION)/scripting'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'build/bin/citra-valentin-windows-$(CITRA_VERSION)'
        includeRootFolder: true
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/citra-valentin-windows-$(CITRA_VERSION).tar.gz'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'artifacts'
        publishLocation: 'Container'
    - task: GitHubRelease@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        gitHubConnection: 'GitHub Releases'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: '$(CITRA_VERSION)'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
- job: Linux
  timeoutInMinutes: 60
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
    - script: |
        sudo apt-get update
        sudo apt-get install -qq -y libsdl2-dev qtbase5-dev libqt5opengl5-dev qtmultimedia5-dev libqt5multimedia5-plugins libavcodec-dev libavformat-dev libswscale-dev
      displayName: 'Install dependencies'
    - script: |
        git submodule update --init --recursive
      displayName: 'Fetch submodules'
    - script: |
        mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        cmakeArgs: -DCMAKE_BUILD_TYPE=Release -DCITRA_ENABLE_DISCORD_RP=ON -DENABLE_FFMPEG_VIDEO_DUMPER=ON ..
    - powershell: |
        Set-Location "build"
        make
      displayName: 'Build'
    - powershell: |
        $CITRA_VERSION = (./build/bin/citra-valentin --version) -replace "Citra Valentin ", ""
        Write-Host "Citra Version: $CITRA_VERSION"
        Write-Host "##vso[task.setvariable variable=CITRA_VERSION]$CITRA_VERSION"
      displayName: 'Get Citra version'
    - script: |
        ./build/bin/tests
      displayName: 'Run tests'
    - powershell: |
        Remove-Item "./build/bin/tests" # Tests

        # Rename bin to citra-valentin-linux-$env:CITRA_VERSION
        Rename-Item "./build/bin" "citra-valentin-linux-$env:CITRA_VERSION"
      displayName: 'Cleanup'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '.'
        Contents: |
          readme.md
          license.txt
        TargetFolder: 'build/citra-valentin-linux-$(CITRA_VERSION)'
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'dist/scripting'
        Contents: |
          **
        TargetFolder: 'build/citra-valentin-linux-$(CITRA_VERSION)/scripting'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'build/citra-valentin-linux-$(CITRA_VERSION)'
        includeRootFolder: true
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/citra-valentin-linux-$(CITRA_VERSION).tar.gz'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'artifacts'
        publishLocation: 'Container'
- job: ClangFormat
  timeoutInMinutes: 60
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
    - script: |
        sudo apt-get update
        sudo apt-get remove -qq -y clang-6.0 libclang-common-6.0-dev libclang1-6.0 libllvm6.0
        sudo apt-get install -qq -y clang-format-6.0
      displayName: 'Install clang-format'
    - bash: |
        if [ "$(Build.Reason)" = "PullRequest" ]; then
            # Get list of every file modified in this pull request
            files_to_lint="$(git diff --name-only --diff-filter=ACMRTUXB $TRAVIS_COMMIT_RANGE | grep '^src/[^.]*[.]\(cpp\|h\)$' || true)"
        else
            # Check everything for branch pushes
            files_to_lint="$(find src/ -name '*.cpp' -or -name '*.h')"
        fi

        # Turn off tracing for this because it's too verbose
        set +x

        for f in $files_to_lint; do
            d=$(diff -u "$f" <(clang-format-6.0 "$f") || true)
            if ! [ -z "$d" ]; then
                echo "!!! $f not compliant to coding style, here is the fix:"
                echo "$d"
                fail=1
            fi
        done

        set -x

        if [ "$fail" = 1 ]; then
            exit 1
        fi
      displayName: 'clang-format check'
- job: Release
  dependsOn:
    - Linux
    - Windows
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'artifacts'
        targetPath: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Download artifacts'
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'GitHub Releases'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        assets: '$(Build.ArtifactStagingDirectory)/*'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
